/**
 * @file Layout.cpp
 * @brief Layout implementation file
 */

#include "Layout.h"
#include "Camera.h"

//-----------------------------------------------------------------------------------------------------------------------------
// Layout

void Layout::UpdateCameraBoundaries(float in_SpanX, float in_SpanY, Camera* in_Camera, bool in_CenterCamera)
{
	float l_HalfSpanX = in_SpanX * 0.5f;
	float l_HalfSpanY = in_SpanY * 0.5f;

	// Set xy boundaries for the camera to the extents of the image tiles
	in_Camera->SetBoundaryX(-l_HalfSpanX, l_HalfSpanX);
	in_Camera->SetBoundaryY(-l_HalfSpanY, l_HalfSpanY);

	// Temporarily zoom the extents of the world region to calculate the z-distance that
	// can view the entire contents of the image plane
	in_Camera->ZoomExtents(-l_HalfSpanX, -l_HalfSpanY, l_HalfSpanX, l_HalfSpanY);

	// Get where the camera would move to with these extents
	float l_CameraPosX, l_CameraPosY, l_CameraPosZ;
	in_Camera->GetMoveToPosition(l_CameraPosX, l_CameraPosY, l_CameraPosZ);

	// Update our max z-distance boundary
	in_Camera->SetBoundaryZ(in_Camera->GetNearPlaneDist(), l_CameraPosZ);

	// Undo the ZoomExtents
	in_Camera->UndoLastMove();

	// Set the home position
	in_Camera->SetHomePosition(0, 0, l_CameraPosZ);

	// Kill the animation time that would have been generated by the zoom extents
	in_Camera->GetPosition(l_CameraPosX, l_CameraPosY, l_CameraPosZ);
	in_Camera->MoveTo(l_CameraPosX, l_CameraPosY, l_CameraPosZ, 0.0f);

	// Check if we should center the camera
	if(in_CenterCamera)
	{
		in_Camera->MoveToHome();
	}
}
